{
  "version": 3,
  "sources": [
    "src/index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "export default (bits, abc)->\n  throw Error \"記号が足りません\" if abc.length < (1 << bits)\n  size = abc.length\n  decode = {}\n  encode = abc\n\n  for c, n in abc\n    decode[c] = n\n\n  toHex: (code)->\n    str = \"\"\n    base = 1\n    buffer = 0\n\n    bits = 4\n    limit = 1 << bits\n    mask = limit - 1\n    for c in code by -1\n      n = decode[c]\n      unless n?\n        console.error \"decode error on #{c}\"\n        return null\n\n      buffer += n * base\n      base *= size\n\n      while base >= limit\n        str = (buffer & mask).toString(16) + str\n        buffer >>= bits\n        base >>= bits\n    str\n\n  byNumber: (size, buffer)->\n    mask = (1 << bits) - 1\n\n    str = \"\"\n    for index in [size * 8 .. 0] by -bits\n      n = index - bits\n\n      switch\n        when n > 31 - bits\n          code = 0\n#          console.warn [n]\n        when n > 0\n          code = (buffer & (mask <<  n)) >>  n\n#          console.warn [n, [ buffer, (mask << n), code].map (it)-> it.toString(2)]\n        when n == 0\n          code = buffer & mask\n#          console.warn [n, [ buffer, mask, code].map (it)-> it.toString(2)]\n        when 0 > n\n          code = (buffer & (mask >> -n)) << -n\n#          console.warn [n, [ buffer, (mask >> -n), code].map (it)-> it.toString(2)]\n\n      str += encode[code]\n    str\n"
  ],
  "sourceRoot": ""
}